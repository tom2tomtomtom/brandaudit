# Production Docker Compose Configuration for AI Brand Audit Tool
# Optimized for production deployment with PostgreSQL, Redis, and monitoring

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: brand_audit_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-brandaudit}
      POSTGRES_USER: ${POSTGRES_USER:-brandaudit_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-brandaudit_user} -d ${POSTGRES_DB:-brandaudit}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - brand-audit-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    container_name: brand_audit_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - brand-audit-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    container_name: brand_audit_backend
    environment:
      # Application
      - FLASK_ENV=production
      - DEBUG=false
      - PORT=8080

      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}

      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER:-brandaudit_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-brandaudit}

      # API Keys
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - BRANDFETCH_API_KEY=${BRANDFETCH_API_KEY}
      - OPENCORPORATES_API_KEY=${OPENCORPORATES_API_KEY}

      # CORS
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost,https://localhost}

      # Redis/Caching
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - RATE_LIMIT_STORAGE_URL=redis://redis:6379/1

      # File Upload
      - UPLOAD_FOLDER=/app/uploads
      - MAX_FILE_SIZE=16777216

      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - backend_instance:/app/instance
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - brand-audit-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      replicas: 1

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: brand_audit_frontend
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8080/api}
    restart: unless-stopped
    networks:
      - brand-audit-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Nginx Reverse Proxy and Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: brand_audit_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-locations.conf:/etc/nginx/conf.d/locations.conf:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
      - ssl_certs:/etc/ssl/certs:ro
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - brand-audit-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Background Task Worker (Celery)
  worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    container_name: brand_audit_worker
    command: celery -A app.celery worker --loglevel=info --concurrency=2
    environment:
      # Same environment as backend
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-brandaudit_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-brandaudit}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - BRANDFETCH_API_KEY=${BRANDFETCH_API_KEY}
      - OPENCORPORATES_API_KEY=${OPENCORPORATES_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - brand-audit-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Celery Beat Scheduler
  scheduler:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    container_name: brand_audit_scheduler
    command: celery -A app.celery beat --loglevel=info
    environment:
      # Same environment as backend
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-brandaudit_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-brandaudit}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - brand-audit-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Monitoring: Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: brand_audit_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - brand-audit-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Monitoring: Grafana (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: brand_audit_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - brand-audit-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  backend_instance:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
  ssl_certs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  brand-audit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
