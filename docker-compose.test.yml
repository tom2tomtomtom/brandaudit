# Testing Docker Compose Configuration
# Use: docker-compose -f docker-compose.yml -f docker-compose.test.yml up --abort-on-container-exit

version: '3.8'

services:
  # Test database with in-memory storage
  postgres-test:
    image: postgres:15-alpine
    container_name: brand_audit_postgres_test
    environment:
      POSTGRES_DB: brandaudit_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    tmpfs:
      - /var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d brandaudit_test"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - test-network

  # Test Redis with in-memory storage
  redis-test:
    image: redis:7-alpine
    container_name: brand_audit_redis_test
    command: redis-server --save ""
    tmpfs:
      - /data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - test-network

  # Backend tests
  backend-test:
    build:
      context: .
      dockerfile: backend/Dockerfile.test
    container_name: brand_audit_backend_test
    environment:
      - FLASK_ENV=testing
      - DEBUG=true
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/brandaudit_test
      - CELERY_BROKER_URL=redis://redis-test:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-test:6379/0
      - SECRET_KEY=test-secret-key
      - JWT_SECRET_KEY=test-jwt-secret-key
      - OPENROUTER_API_KEY=test-openrouter-key
      - NEWS_API_KEY=test-news-key
      - BRANDFETCH_API_KEY=test-brandfetch-key
      - PYTHONPATH=/app
    volumes:
      - ./backend:/app
      - test_uploads:/app/uploads
      - test_logs:/app/logs
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Running backend tests...' &&
        python -m pytest tests/ -v --tb=short --cov=src --cov-report=term-missing --cov-report=html:htmlcov &&
        echo 'Backend tests completed'
      "
    networks:
      - test-network

  # Frontend tests
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
    container_name: brand_audit_frontend_test
    environment:
      - NODE_ENV=test
      - VITE_API_BASE_URL=http://backend-test:8080/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: >
      sh -c "
        echo 'Running frontend tests...' &&
        pnpm test:unit &&
        pnpm test:e2e:headless &&
        echo 'Frontend tests completed'
      "
    networks:
      - test-network

  # Integration tests
  integration-test:
    build:
      context: .
      dockerfile: backend/Dockerfile.test
    container_name: brand_audit_integration_test
    environment:
      - FLASK_ENV=testing
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/brandaudit_test
      - CELERY_BROKER_URL=redis://redis-test:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-test:6379/0
      - SECRET_KEY=test-secret-key
      - JWT_SECRET_KEY=test-jwt-secret-key
      - API_BASE_URL=http://backend-test:8080/api
      - FRONTEND_URL=http://frontend-test:5173
      - PYTHONPATH=/app
    volumes:
      - ./backend:/app
      - ./tests:/app/integration_tests
    depends_on:
      - backend-test
      - frontend-test
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 30 &&
        echo 'Running integration tests...' &&
        python -m pytest integration_tests/ -v --tb=short &&
        echo 'Integration tests completed'
      "
    networks:
      - test-network

  # Load testing with Artillery
  load-test:
    image: artilleryio/artillery:latest
    container_name: brand_audit_load_test
    volumes:
      - ./tests/load:/scripts
    depends_on:
      - backend-test
    command: >
      sh -c "
        echo 'Running load tests...' &&
        artillery run /scripts/load-test.yml &&
        echo 'Load tests completed'
      "
    networks:
      - test-network
    profiles:
      - load-test

  # Security testing with OWASP ZAP
  security-test:
    image: owasp/zap2docker-stable
    container_name: brand_audit_security_test
    volumes:
      - ./tests/security:/zap/wrk
    depends_on:
      - backend-test
      - frontend-test
    command: >
      sh -c "
        echo 'Running security tests...' &&
        zap-baseline.py -t http://backend-test:8080 -r security-report.html &&
        echo 'Security tests completed'
      "
    networks:
      - test-network
    profiles:
      - security-test

  # Test results collector
  test-results:
    image: alpine:latest
    container_name: brand_audit_test_results
    volumes:
      - test_results:/results
      - ./backend/htmlcov:/results/backend-coverage
      - ./frontend/coverage:/results/frontend-coverage
      - ./tests/reports:/results/reports
    command: >
      sh -c "
        echo 'Collecting test results...' &&
        ls -la /results/ &&
        echo 'Test results collection completed'
      "
    depends_on:
      - backend-test
      - frontend-test
      - integration-test
    networks:
      - test-network

# Test-specific volumes
volumes:
  test_uploads:
    driver: local
  test_logs:
    driver: local
  test_results:
    driver: local

# Test network
networks:
  test-network:
    driver: bridge
